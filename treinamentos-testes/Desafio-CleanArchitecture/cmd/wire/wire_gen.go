// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/wrferreira1003/Desafio-Clean-Architecture/internal/domain/repository"
	"github.com/wrferreira1003/Desafio-Clean-Architecture/internal/infra/database"
	"github.com/wrferreira1003/Desafio-Clean-Architecture/internal/usecase"
	"github.com/wrferreira1003/Desafio-Clean-Architecture/pkg/events"
)

// Injectors from wire.go:

// Inicializador gerado pelo Google Wire para o OrderUseCase
func InitializeOrderUseCase(db *sql.DB) (*usecase.CreateOrderUseCase, error) {
	orderRepository := database.NewOrderRepository(db)
	eventInterface := events.NewOrderCreatedEvent()
	eventDispatcher := events.NewEventDispatcher()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, eventInterface, eventDispatcher)
	return createOrderUseCase, nil
}

// wire.go:

// set de provedores seria tudo que vamos utilizar no projeto
var OrderSet = wire.NewSet(database.NewOrderRepository, wire.Bind(new(repository.OrderRepositoryInterface), new(*database.OrderRepository)), events.NewEventDispatcher, wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)), events.NewOrderCreatedEvent, usecase.NewCreateOrderUseCase)
