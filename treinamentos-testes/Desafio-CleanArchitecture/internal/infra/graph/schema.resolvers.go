package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	dto "github.com/wrferreira1003/Desafio-Clean-Architecture/internal/Dto"
	"github.com/wrferreira1003/Desafio-Clean-Architecture/internal/infra/graph/model"
)

// CreateOrder é o resolver para o campo createOrder no esquema GraphQL
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	orderInput := dto.OrderInputDTO{
		ID:    input.ID,
		Price: input.Price,
		Tax:   input.Tax,
	}

	// Executa o caso de uso
	orderOutput, err := r.OrderUseCase.Execute(orderInput)
	if err != nil {
		return nil, err
	}

	// Converte o DTO de saída para o modelo GraphQL
	return &model.Order{
		ID:         orderOutput.ID,
		Price:      float64(orderOutput.Price),
		Tax:        float64(orderOutput.Tax),
		FinalPrice: float64(orderOutput.FinalPrice),
	}, nil
}

// Orders é o resolver para o campo orders no esquema GraphQL
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Mutation implementa o MutationResolver
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query implementa o QueryResolver
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// mutationResolver é o resolver para mutations
type mutationResolver struct{ *Resolver }

// queryResolver é o resolver para queries
type queryResolver struct{ *Resolver }
